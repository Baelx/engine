// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	controller.proto

It has these top-level messages:
	PopRequest
	PopResponse
	StatusRequest
	StatusResponse
	StartRequest
	StartResponse
	CreateRequest
	CreateResponse
	AddGameTickRequest
	AddGameTickResponse
	ListGameTicksRequest
	ListGameTicksResponse
	EndGameRequest
	EndGameResponse
	SnakeOptions
	Game
	GameTick
	Point
	Snake
	Death
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PopRequest struct {
}

func (m *PopRequest) Reset()                    { *m = PopRequest{} }
func (m *PopRequest) String() string            { return proto.CompactTextString(m) }
func (*PopRequest) ProtoMessage()               {}
func (*PopRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{0} }

type PopResponse struct {
	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *PopResponse) Reset()                    { *m = PopResponse{} }
func (m *PopResponse) String() string            { return proto.CompactTextString(m) }
func (*PopResponse) ProtoMessage()               {}
func (*PopResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{1} }

func (m *PopResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PopResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type StatusRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{2} }

func (m *StatusRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type StatusResponse struct {
	Game     *Game     `protobuf:"bytes,1,opt,name=Game" json:"Game,omitempty"`
	LastTick *GameTick `protobuf:"bytes,2,opt,name=LastTick" json:"LastTick,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{3} }

func (m *StatusResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *StatusResponse) GetLastTick() *GameTick {
	if m != nil {
		return m.LastTick
	}
	return nil
}

type StartRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{4} }

func (m *StartRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{5} }

type CreateRequest struct {
	Width  int64           `protobuf:"varint,1,opt,name=Width,proto3" json:"Width,omitempty"`
	Height int64           `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Food   int64           `protobuf:"varint,3,opt,name=Food,proto3" json:"Food,omitempty"`
	Snakes []*SnakeOptions `protobuf:"bytes,4,rep,name=Snakes" json:"Snakes,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{6} }

func (m *CreateRequest) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *CreateRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CreateRequest) GetFood() int64 {
	if m != nil {
		return m.Food
	}
	return 0
}

func (m *CreateRequest) GetSnakes() []*SnakeOptions {
	if m != nil {
		return m.Snakes
	}
	return nil
}

type CreateResponse struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{7} }

func (m *CreateResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type AddGameTickRequest struct {
	ID       string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	GameTick *GameTick `protobuf:"bytes,2,opt,name=GameTick" json:"GameTick,omitempty"`
}

func (m *AddGameTickRequest) Reset()                    { *m = AddGameTickRequest{} }
func (m *AddGameTickRequest) String() string            { return proto.CompactTextString(m) }
func (*AddGameTickRequest) ProtoMessage()               {}
func (*AddGameTickRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{8} }

func (m *AddGameTickRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AddGameTickRequest) GetGameTick() *GameTick {
	if m != nil {
		return m.GameTick
	}
	return nil
}

type AddGameTickResponse struct {
	Game *Game `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
}

func (m *AddGameTickResponse) Reset()                    { *m = AddGameTickResponse{} }
func (m *AddGameTickResponse) String() string            { return proto.CompactTextString(m) }
func (*AddGameTickResponse) ProtoMessage()               {}
func (*AddGameTickResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{9} }

func (m *AddGameTickResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type ListGameTicksRequest struct {
	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (m *ListGameTicksRequest) Reset()                    { *m = ListGameTicksRequest{} }
func (m *ListGameTicksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGameTicksRequest) ProtoMessage()               {}
func (*ListGameTicksRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{10} }

func (m *ListGameTicksRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ListGameTicksRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGameTicksRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListGameTicksResponse struct {
	Ticks []*GameTick `protobuf:"bytes,1,rep,name=Ticks" json:"Ticks,omitempty"`
	Count int32       `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *ListGameTicksResponse) Reset()                    { *m = ListGameTicksResponse{} }
func (m *ListGameTicksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGameTicksResponse) ProtoMessage()               {}
func (*ListGameTicksResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{11} }

func (m *ListGameTicksResponse) GetTicks() []*GameTick {
	if m != nil {
		return m.Ticks
	}
	return nil
}

func (m *ListGameTicksResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type EndGameRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *EndGameRequest) Reset()                    { *m = EndGameRequest{} }
func (m *EndGameRequest) String() string            { return proto.CompactTextString(m) }
func (*EndGameRequest) ProtoMessage()               {}
func (*EndGameRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{12} }

func (m *EndGameRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type EndGameResponse struct {
}

func (m *EndGameResponse) Reset()                    { *m = EndGameResponse{} }
func (m *EndGameResponse) String() string            { return proto.CompactTextString(m) }
func (*EndGameResponse) ProtoMessage()               {}
func (*EndGameResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{13} }

type SnakeOptions struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	URL  string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	ID   string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *SnakeOptions) Reset()                    { *m = SnakeOptions{} }
func (m *SnakeOptions) String() string            { return proto.CompactTextString(m) }
func (*SnakeOptions) ProtoMessage()               {}
func (*SnakeOptions) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{14} }

func (m *SnakeOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SnakeOptions) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *SnakeOptions) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Game struct {
	ID           string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Status       string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Width        int64  `protobuf:"varint,3,opt,name=Width,proto3" json:"Width,omitempty"`
	Height       int64  `protobuf:"varint,4,opt,name=Height,proto3" json:"Height,omitempty"`
	SnakeTimeout int64  `protobuf:"varint,6,opt,name=SnakeTimeout,proto3" json:"SnakeTimeout,omitempty"`
	TurnTimeout  int64  `protobuf:"varint,7,opt,name=TurnTimeout,proto3" json:"TurnTimeout,omitempty"`
	Mode         string `protobuf:"bytes,8,opt,name=Mode,proto3" json:"Mode,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{15} }

func (m *Game) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Game) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Game) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Game) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Game) GetSnakeTimeout() int64 {
	if m != nil {
		return m.SnakeTimeout
	}
	return 0
}

func (m *Game) GetTurnTimeout() int64 {
	if m != nil {
		return m.TurnTimeout
	}
	return 0
}

func (m *Game) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

type GameTick struct {
	Turn   int64    `protobuf:"varint,1,opt,name=Turn,proto3" json:"Turn,omitempty"`
	Food   []*Point `protobuf:"bytes,2,rep,name=Food" json:"Food,omitempty"`
	Snakes []*Snake `protobuf:"bytes,3,rep,name=Snakes" json:"Snakes,omitempty"`
}

func (m *GameTick) Reset()                    { *m = GameTick{} }
func (m *GameTick) String() string            { return proto.CompactTextString(m) }
func (*GameTick) ProtoMessage()               {}
func (*GameTick) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{16} }

func (m *GameTick) GetTurn() int64 {
	if m != nil {
		return m.Turn
	}
	return 0
}

func (m *GameTick) GetFood() []*Point {
	if m != nil {
		return m.Food
	}
	return nil
}

func (m *GameTick) GetSnakes() []*Snake {
	if m != nil {
		return m.Snakes
	}
	return nil
}

type Point struct {
	X int64 `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{17} }

func (m *Point) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Snake struct {
	ID     string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	URL    string   `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Body   []*Point `protobuf:"bytes,4,rep,name=Body" json:"Body,omitempty"`
	Health int64    `protobuf:"varint,5,opt,name=Health,proto3" json:"Health,omitempty"`
	Death  *Death   `protobuf:"bytes,6,opt,name=Death" json:"Death,omitempty"`
	Color  string   `protobuf:"bytes,7,opt,name=Color,proto3" json:"Color,omitempty"`
}

func (m *Snake) Reset()                    { *m = Snake{} }
func (m *Snake) String() string            { return proto.CompactTextString(m) }
func (*Snake) ProtoMessage()               {}
func (*Snake) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{18} }

func (m *Snake) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Snake) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Snake) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Snake) GetBody() []*Point {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Snake) GetHealth() int64 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *Snake) GetDeath() *Death {
	if m != nil {
		return m.Death
	}
	return nil
}

func (m *Snake) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type Death struct {
	Cause string `protobuf:"bytes,1,opt,name=Cause,proto3" json:"Cause,omitempty"`
	Turn  int64  `protobuf:"varint,2,opt,name=Turn,proto3" json:"Turn,omitempty"`
}

func (m *Death) Reset()                    { *m = Death{} }
func (m *Death) String() string            { return proto.CompactTextString(m) }
func (*Death) ProtoMessage()               {}
func (*Death) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{19} }

func (m *Death) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *Death) GetTurn() int64 {
	if m != nil {
		return m.Turn
	}
	return 0
}

func init() {
	proto.RegisterType((*PopRequest)(nil), "pb.PopRequest")
	proto.RegisterType((*PopResponse)(nil), "pb.PopResponse")
	proto.RegisterType((*StatusRequest)(nil), "pb.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "pb.StatusResponse")
	proto.RegisterType((*StartRequest)(nil), "pb.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "pb.StartResponse")
	proto.RegisterType((*CreateRequest)(nil), "pb.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "pb.CreateResponse")
	proto.RegisterType((*AddGameTickRequest)(nil), "pb.AddGameTickRequest")
	proto.RegisterType((*AddGameTickResponse)(nil), "pb.AddGameTickResponse")
	proto.RegisterType((*ListGameTicksRequest)(nil), "pb.ListGameTicksRequest")
	proto.RegisterType((*ListGameTicksResponse)(nil), "pb.ListGameTicksResponse")
	proto.RegisterType((*EndGameRequest)(nil), "pb.EndGameRequest")
	proto.RegisterType((*EndGameResponse)(nil), "pb.EndGameResponse")
	proto.RegisterType((*SnakeOptions)(nil), "pb.SnakeOptions")
	proto.RegisterType((*Game)(nil), "pb.Game")
	proto.RegisterType((*GameTick)(nil), "pb.GameTick")
	proto.RegisterType((*Point)(nil), "pb.Point")
	proto.RegisterType((*Snake)(nil), "pb.Snake")
	proto.RegisterType((*Death)(nil), "pb.Death")
}
func (this *PopRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PopRequest)
	if !ok {
		that2, ok := that.(PopRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PopResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PopResponse)
	if !ok {
		that2, ok := that.(PopResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *StatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Game.Equal(that1.Game) {
		return false
	}
	if !this.LastTick.Equal(that1.LastTick) {
		return false
	}
	return true
}
func (this *StartRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartRequest)
	if !ok {
		that2, ok := that.(StartRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *StartResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StartResponse)
	if !ok {
		that2, ok := that.(StartResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Food != that1.Food {
		return false
	}
	if len(this.Snakes) != len(that1.Snakes) {
		return false
	}
	for i := range this.Snakes {
		if !this.Snakes[i].Equal(that1.Snakes[i]) {
			return false
		}
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *AddGameTickRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameTickRequest)
	if !ok {
		that2, ok := that.(AddGameTickRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if !this.GameTick.Equal(that1.GameTick) {
		return false
	}
	return true
}
func (this *AddGameTickResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddGameTickResponse)
	if !ok {
		that2, ok := that.(AddGameTickResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Game.Equal(that1.Game) {
		return false
	}
	return true
}
func (this *ListGameTicksRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGameTicksRequest)
	if !ok {
		that2, ok := that.(ListGameTicksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListGameTicksResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGameTicksResponse)
	if !ok {
		that2, ok := that.(ListGameTicksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ticks) != len(that1.Ticks) {
		return false
	}
	for i := range this.Ticks {
		if !this.Ticks[i].Equal(that1.Ticks[i]) {
			return false
		}
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *EndGameRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndGameRequest)
	if !ok {
		that2, ok := that.(EndGameRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *EndGameResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndGameResponse)
	if !ok {
		that2, ok := that.(EndGameResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SnakeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnakeOptions)
	if !ok {
		that2, ok := that.(SnakeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *Game) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Game)
	if !ok {
		that2, ok := that.(Game)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.SnakeTimeout != that1.SnakeTimeout {
		return false
	}
	if this.TurnTimeout != that1.TurnTimeout {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *GameTick) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameTick)
	if !ok {
		that2, ok := that.(GameTick)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Turn != that1.Turn {
		return false
	}
	if len(this.Food) != len(that1.Food) {
		return false
	}
	for i := range this.Food {
		if !this.Food[i].Equal(that1.Food[i]) {
			return false
		}
	}
	if len(this.Snakes) != len(that1.Snakes) {
		return false
	}
	for i := range this.Snakes {
		if !this.Snakes[i].Equal(that1.Snakes[i]) {
			return false
		}
	}
	return true
}
func (this *Point) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Point)
	if !ok {
		that2, ok := that.(Point)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *Snake) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Snake)
	if !ok {
		that2, ok := that.(Snake)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Body) != len(that1.Body) {
		return false
	}
	for i := range this.Body {
		if !this.Body[i].Equal(that1.Body[i]) {
			return false
		}
	}
	if this.Health != that1.Health {
		return false
	}
	if !this.Death.Equal(that1.Death) {
		return false
	}
	if this.Color != that1.Color {
		return false
	}
	return true
}
func (this *Death) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Death)
	if !ok {
		that2, ok := that.(Death)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.Turn != that1.Turn {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	// Pop should pop a game that is unlocked and unfinished from the queue, lock
	// the game and return it to the worker to begin processing. This call will
	// be polled by the workers.
	Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
	// Status retrieves the game state including the last processed game tick.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Start starts the game running, and will make it ready to be picked up by a
	// worker.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Create creates a new game, but doesn't start running frames.
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// AddGameTick adds a new game tick to the game. A lock must be held for this
	// call to succeed.
	AddGameTick(ctx context.Context, in *AddGameTickRequest, opts ...grpc.CallOption) (*AddGameTickResponse, error)
	// ListGameTicks will list all game ticks given a limit and offset.
	ListGameTicks(ctx context.Context, in *ListGameTicksRequest, opts ...grpc.CallOption) (*ListGameTicksResponse, error)
	// EndGame sets the game status to complete. A lock must be held for this call
	// to succeed.
	EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*EndGameResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	out := new(PopResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Pop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddGameTick(ctx context.Context, in *AddGameTickRequest, opts ...grpc.CallOption) (*AddGameTickResponse, error) {
	out := new(AddGameTickResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/AddGameTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListGameTicks(ctx context.Context, in *ListGameTicksRequest, opts ...grpc.CallOption) (*ListGameTicksResponse, error) {
	out := new(ListGameTicksResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/ListGameTicks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) EndGame(ctx context.Context, in *EndGameRequest, opts ...grpc.CallOption) (*EndGameResponse, error) {
	out := new(EndGameResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/EndGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// Pop should pop a game that is unlocked and unfinished from the queue, lock
	// the game and return it to the worker to begin processing. This call will
	// be polled by the workers.
	Pop(context.Context, *PopRequest) (*PopResponse, error)
	// Status retrieves the game state including the last processed game tick.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// Start starts the game running, and will make it ready to be picked up by a
	// worker.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Create creates a new game, but doesn't start running frames.
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// AddGameTick adds a new game tick to the game. A lock must be held for this
	// call to succeed.
	AddGameTick(context.Context, *AddGameTickRequest) (*AddGameTickResponse, error)
	// ListGameTicks will list all game ticks given a limit and offset.
	ListGameTicks(context.Context, *ListGameTicksRequest) (*ListGameTicksResponse, error)
	// EndGame sets the game status to complete. A lock must be held for this call
	// to succeed.
	EndGame(context.Context, *EndGameRequest) (*EndGameResponse, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Pop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddGameTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameTickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddGameTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/AddGameTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddGameTick(ctx, req.(*AddGameTickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListGameTicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameTicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListGameTicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/ListGameTicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListGameTicks(ctx, req.(*ListGameTicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_EndGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).EndGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/EndGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).EndGame(ctx, req.(*EndGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pop",
			Handler:    _Controller_Pop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Controller_Status_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Controller_Start_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Controller_Create_Handler,
		},
		{
			MethodName: "AddGameTick",
			Handler:    _Controller_AddGameTick_Handler,
		},
		{
			MethodName: "ListGameTicks",
			Handler:    _Controller_ListGameTicks_Handler,
		},
		{
			MethodName: "EndGame",
			Handler:    _Controller_EndGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func NewPopulatedPopRequest(r randyController, easy bool) *PopRequest {
	this := &PopRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPopResponse(r randyController, easy bool) *PopResponse {
	this := &PopResponse{}
	this.ID = string(randStringController(r))
	this.Token = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusRequest(r randyController, easy bool) *StatusRequest {
	this := &StatusRequest{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusResponse(r randyController, easy bool) *StatusResponse {
	this := &StatusResponse{}
	if r.Intn(10) != 0 {
		this.Game = NewPopulatedGame(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LastTick = NewPopulatedGameTick(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStartRequest(r randyController, easy bool) *StartRequest {
	this := &StartRequest{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStartResponse(r randyController, easy bool) *StartResponse {
	this := &StartResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateRequest(r randyController, easy bool) *CreateRequest {
	this := &CreateRequest{}
	this.Width = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Height = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.Food = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Food *= -1
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Snakes = make([]*SnakeOptions, v1)
		for i := 0; i < v1; i++ {
			this.Snakes[i] = NewPopulatedSnakeOptions(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateResponse(r randyController, easy bool) *CreateResponse {
	this := &CreateResponse{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAddGameTickRequest(r randyController, easy bool) *AddGameTickRequest {
	this := &AddGameTickRequest{}
	this.ID = string(randStringController(r))
	if r.Intn(10) != 0 {
		this.GameTick = NewPopulatedGameTick(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAddGameTickResponse(r randyController, easy bool) *AddGameTickResponse {
	this := &AddGameTickResponse{}
	if r.Intn(10) != 0 {
		this.Game = NewPopulatedGame(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGameTicksRequest(r randyController, easy bool) *ListGameTicksRequest {
	this := &ListGameTicksRequest{}
	this.ID = string(randStringController(r))
	this.Limit = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	this.Offset = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGameTicksResponse(r randyController, easy bool) *ListGameTicksResponse {
	this := &ListGameTicksResponse{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Ticks = make([]*GameTick, v2)
		for i := 0; i < v2; i++ {
			this.Ticks[i] = NewPopulatedGameTick(r, easy)
		}
	}
	this.Count = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndGameRequest(r randyController, easy bool) *EndGameRequest {
	this := &EndGameRequest{}
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEndGameResponse(r randyController, easy bool) *EndGameResponse {
	this := &EndGameResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSnakeOptions(r randyController, easy bool) *SnakeOptions {
	this := &SnakeOptions{}
	this.Name = string(randStringController(r))
	this.URL = string(randStringController(r))
	this.ID = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGame(r randyController, easy bool) *Game {
	this := &Game{}
	this.ID = string(randStringController(r))
	this.Status = string(randStringController(r))
	this.Width = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Width *= -1
	}
	this.Height = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Height *= -1
	}
	this.SnakeTimeout = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SnakeTimeout *= -1
	}
	this.TurnTimeout = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TurnTimeout *= -1
	}
	this.Mode = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGameTick(r randyController, easy bool) *GameTick {
	this := &GameTick{}
	this.Turn = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Turn *= -1
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Food = make([]*Point, v3)
		for i := 0; i < v3; i++ {
			this.Food[i] = NewPopulatedPoint(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Snakes = make([]*Snake, v4)
		for i := 0; i < v4; i++ {
			this.Snakes[i] = NewPopulatedSnake(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPoint(r randyController, easy bool) *Point {
	this := &Point{}
	this.X = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.X *= -1
	}
	this.Y = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Y *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSnake(r randyController, easy bool) *Snake {
	this := &Snake{}
	this.ID = string(randStringController(r))
	this.Name = string(randStringController(r))
	this.URL = string(randStringController(r))
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Body = make([]*Point, v5)
		for i := 0; i < v5; i++ {
			this.Body[i] = NewPopulatedPoint(r, easy)
		}
	}
	this.Health = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Health *= -1
	}
	if r.Intn(10) != 0 {
		this.Death = NewPopulatedDeath(r, easy)
	}
	this.Color = string(randStringController(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeath(r randyController, easy bool) *Death {
	this := &Death{}
	this.Cause = string(randStringController(r))
	this.Turn = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Turn *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyController interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneController(r randyController) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringController(r randyController) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneController(r)
	}
	return string(tmps)
}
func randUnrecognizedController(r randyController, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldController(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldController(dAtA []byte, r randyController, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateController(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateController(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateController(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateController(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("controller.proto", fileDescriptorController) }

var fileDescriptorController = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xe3, 0x24, 0x6d, 0x26, 0x69, 0x9a, 0x6e, 0x4b, 0x09, 0x11, 0xb4, 0x61, 0x91, 0x50,
	0x0f, 0x90, 0x8a, 0xf4, 0x8e, 0x44, 0x1b, 0xfe, 0xa4, 0xd0, 0x16, 0x37, 0x88, 0x96, 0x13, 0x49,
	0xe3, 0x26, 0x56, 0x13, 0x6f, 0xb0, 0xd7, 0x07, 0xc4, 0x0b, 0x21, 0x71, 0x47, 0xbc, 0x0e, 0x3c,
	0x05, 0x27, 0xc4, 0xee, 0xec, 0xae, 0x7f, 0x1a, 0xf7, 0x60, 0x69, 0xe7, 0x77, 0x67, 0xbe, 0xf9,
	0x76, 0x0c, 0x8d, 0x4b, 0xe6, 0xf3, 0x80, 0xcd, 0x66, 0x6e, 0xd0, 0x59, 0x04, 0x8c, 0x33, 0x52,
	0x58, 0x8c, 0x5a, 0x4f, 0x27, 0x1e, 0x9f, 0x46, 0xa3, 0xce, 0x25, 0x9b, 0xef, 0x4f, 0xd8, 0x84,
	0xed, 0xa3, 0x69, 0x14, 0x5d, 0xa1, 0x84, 0x02, 0x9e, 0x54, 0x08, 0xad, 0x01, 0x9c, 0xb2, 0x85,
	0xe3, 0x7e, 0x89, 0xdc, 0x90, 0xd3, 0x03, 0xa8, 0xa2, 0x14, 0x2e, 0x98, 0x1f, 0xba, 0xa4, 0x0e,
	0x85, 0xb7, 0xbd, 0xa6, 0xd5, 0xb6, 0xf6, 0x2a, 0x8e, 0x38, 0x91, 0x2d, 0x28, 0x0d, 0xd8, 0xb5,
	0xeb, 0x37, 0x0b, 0xa8, 0x52, 0x02, 0xdd, 0x85, 0xb5, 0x33, 0x3e, 0xe4, 0x51, 0xa8, 0xb3, 0xdc,
	0x0c, 0xa3, 0xe7, 0x50, 0x37, 0x0e, 0x3a, 0xf1, 0x7d, 0x28, 0xbe, 0x1e, 0xce, 0x5d, 0xf4, 0xa9,
	0x76, 0x57, 0x3b, 0x8b, 0x51, 0x47, 0xca, 0x0e, 0x6a, 0xc9, 0x1e, 0xac, 0xf6, 0x87, 0x21, 0x1f,
	0x78, 0x97, 0xd7, 0x78, 0x53, 0xb5, 0x5b, 0x33, 0x1e, 0x52, 0xe7, 0xc4, 0x56, 0xba, 0x03, 0x35,
	0x91, 0x39, 0xe0, 0xb7, 0xdd, 0xbc, 0x8e, 0xa5, 0x49, 0xbb, 0xba, 0x98, 0x7e, 0x83, 0xb5, 0xa3,
	0xc0, 0x1d, 0x72, 0xd7, 0x44, 0x88, 0x96, 0x3e, 0x7a, 0x63, 0x3e, 0xc5, 0x20, 0xdb, 0x51, 0x02,
	0xd9, 0x86, 0xf2, 0x1b, 0xd7, 0x9b, 0x4c, 0x39, 0xde, 0x6f, 0x3b, 0x5a, 0x22, 0x04, 0x8a, 0xaf,
	0x18, 0x1b, 0x37, 0x6d, 0xd4, 0xe2, 0x59, 0x54, 0x5b, 0x3e, 0xf3, 0x87, 0xd7, 0x6e, 0xd8, 0x2c,
	0xb6, 0x6d, 0x51, 0x6b, 0x43, 0xd6, 0x8a, 0x9a, 0x93, 0x05, 0xf7, 0xc4, 0xad, 0x8e, 0xb6, 0xd3,
	0x36, 0xd4, 0xcd, 0xe5, 0xf9, 0x00, 0xd3, 0x63, 0x20, 0x2f, 0xc6, 0xe3, 0xb8, 0xd1, 0xfc, 0xae,
	0x24, 0x3e, 0xc6, 0x25, 0x1f, 0x1f, 0x73, 0x12, 0xf3, 0xdc, 0xcc, 0xe4, 0x4b, 0xe0, 0x9f, 0xe4,
	0xc2, 0x2f, 0xb5, 0x74, 0x00, 0x5b, 0x7d, 0x2f, 0xe4, 0x26, 0xea, 0xb6, 0xb1, 0x4a, 0xe8, 0xfa,
	0xde, 0xdc, 0x53, 0x18, 0x95, 0x1c, 0x25, 0x48, 0xe8, 0x4e, 0xae, 0xae, 0x42, 0x97, 0x23, 0x48,
	0x25, 0x47, 0x4b, 0xf4, 0x3d, 0xdc, 0xb9, 0x91, 0x55, 0x17, 0x43, 0x05, 0xa9, 0xa4, 0x42, 0x64,
	0xb6, 0x97, 0x5a, 0x51, 0x26, 0x79, 0xd5, 0x11, 0x8b, 0xfc, 0xf8, 0x2a, 0x14, 0x24, 0x9e, 0x2f,
	0x7d, 0xec, 0xee, 0xb6, 0xf9, 0x6f, 0xc0, 0x7a, 0xec, 0xa1, 0x19, 0xd0, 0x13, 0x94, 0x49, 0x0d,
	0x47, 0x8e, 0xf4, 0xd8, 0x60, 0x51, 0x71, 0xf0, 0x4c, 0x1a, 0x60, 0x7f, 0x70, 0xfa, 0x9a, 0xe5,
	0xf2, 0xa8, 0x13, 0xdb, 0x71, 0xe2, 0x9f, 0x96, 0x62, 0xf0, 0x12, 0x28, 0xa2, 0x7d, 0xc5, 0x75,
	0x1d, 0xad, 0xa5, 0x84, 0x67, 0x76, 0x3e, 0xcf, 0x8a, 0x19, 0x9e, 0x51, 0x5d, 0xe4, 0xc0, 0x9b,
	0xbb, 0x2c, 0xe2, 0xcd, 0x32, 0x5a, 0x33, 0x3a, 0xd2, 0x86, 0xea, 0x20, 0x0a, 0x7c, 0xe3, 0xb2,
	0x82, 0x2e, 0x69, 0x95, 0x6c, 0xed, 0x1d, 0x1b, 0xbb, 0xcd, 0x55, 0xd5, 0x9a, 0x3c, 0xd3, 0xcf,
	0x09, 0x77, 0xa4, 0x5d, 0xba, 0x6b, 0xea, 0xe3, 0x99, 0x3c, 0xd0, 0x0c, 0x2f, 0xe0, 0x30, 0x2a,
	0x72, 0x18, 0xa7, 0xcc, 0xf3, 0xb9, 0x26, 0xfb, 0xc3, 0x98, 0xec, 0x76, 0xe2, 0x80, 0x9a, 0x98,
	0xe5, 0x8f, 0xa0, 0x84, 0x11, 0xa4, 0x06, 0xd6, 0xb9, 0xce, 0x6d, 0x9d, 0x4b, 0xe9, 0x42, 0xbf,
	0x26, 0xeb, 0x82, 0xfe, 0xb0, 0xa0, 0x84, 0xfe, 0x4b, 0x00, 0x9a, 0x79, 0x14, 0x96, 0xe7, 0x61,
	0x27, 0xf3, 0x10, 0x65, 0x1e, 0xb2, 0xf1, 0x57, 0xfd, 0xe4, 0xd2, 0x65, 0x4a, 0xb5, 0xc2, 0x75,
	0x38, 0x13, 0x70, 0x97, 0x0c, 0xae, 0x52, 0x22, 0xbb, 0x50, 0xea, 0x89, 0x07, 0x38, 0x45, 0x40,
	0x75, 0x1c, 0x2a, 0x1c, 0xa5, 0x57, 0x44, 0x9b, 0xb1, 0x00, 0xe1, 0xac, 0x38, 0x4a, 0xa0, 0xcf,
	0x20, 0x65, 0x1e, 0x46, 0xa1, 0x61, 0x8b, 0x12, 0x62, 0x1c, 0x0b, 0x09, 0x8e, 0xdd, 0x7f, 0x05,
	0x80, 0xa3, 0x78, 0x3f, 0x93, 0xc7, 0x60, 0x8b, 0xc5, 0x4a, 0xea, 0xaa, 0x50, 0xb3, 0x6f, 0x5b,
	0xeb, 0xb1, 0xac, 0x1f, 0xc3, 0xbe, 0xa1, 0x0f, 0xd9, 0x40, 0x64, 0xd3, 0x7b, 0xb5, 0x45, 0xd2,
	0x2a, 0x1d, 0xf0, 0x44, 0xe0, 0x28, 0x37, 0x1c, 0x69, 0x68, 0x63, 0xbc, 0x0c, 0x5b, 0x1b, 0x29,
	0x4d, 0x92, 0x5e, 0x6d, 0x20, 0x95, 0x3e, 0xb3, 0x0a, 0x55, 0xfa, 0x1b, 0x0b, 0xea, 0x39, 0x54,
	0x53, 0x0b, 0x84, 0x6c, 0x4b, 0x97, 0xe5, 0x0d, 0xd5, 0xba, 0xbb, 0xa4, 0xd7, 0xf1, 0x3d, 0x58,
	0xcb, 0xbc, 0x7a, 0xd2, 0x94, 0x9e, 0x79, 0xeb, 0xa5, 0x75, 0x2f, 0xc7, 0xa2, 0xb3, 0x74, 0x61,
	0x45, 0x3f, 0x63, 0x82, 0x45, 0x66, 0x5f, 0x7d, 0x6b, 0x33, 0xa3, 0x53, 0x31, 0x87, 0x8d, 0xbf,
	0xbf, 0x77, 0xac, 0xef, 0x7f, 0x76, 0xac, 0x5f, 0xe2, 0xfb, 0x24, 0xfe, 0x8c, 0xa3, 0x32, 0xfe,
	0xf1, 0x0e, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x34, 0xb1, 0x85, 0x41, 0x38, 0x07, 0x00, 0x00,
}
