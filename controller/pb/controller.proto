syntax = "proto3";
package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.testgen_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.equal_all) = true;
option go_package = "pb";

service Controller {
  // Lock should lock a specific game using the passed in ID. No writes to the
  // game should happen as long as the lock is valid. The game being locked does
  // not need to exist.
  rpc Lock(LockRequest) returns (LockResponse);
  // Unlock should unlock a game, if already unlocked a valid lock token must be
  // present.
  rpc Unlock(UnlockRequest) returns (UnlockResponse);
  // Pop should pop a game that is unlocked and unfinished from the queue. It can
  // be subject to race conditions where it is locked immediately after, this is
  // expected.
  rpc Pop(PopRequest) returns (PopResponse);
  // Status retrieves the game state.
  rpc Status(StatusRequest) returns (StatusResponse);
  // Start starts the game running, and will make it ready to be picked up by a worker.
  rpc Start(StartRequest) returns (StartResponse);
  // Create creates a new game, but doesn't start running frames
  rpc Create(CreateRequest) returns (CreateResponse);
  // AddGameTick adds a new game tick to the game
  rpc AddGameTick(AddGameTickRequest) returns (AddGameTickResponse);
  // EndGame sets the game status to complete
  rpc EndGame(EndGameRequest) returns (EndGameResponse);
}

message LockRequest  { string ID = 1; }
message LockResponse { string Token = 1; }

message UnlockRequest  { string ID = 1; }
message UnlockResponse {}

message PopRequest  {}
message PopResponse { string ID = 1; }


message StatusRequest  { string ID = 1; }
message StatusResponse { Game Game = 1; }

message StartRequest  { string ID = 1; }
message StartResponse {}

message CreateRequest  { 
  int64 Width = 1;
  int64 Height = 2;
  int64 Food = 3;
  repeated SnakeOptions Snakes = 4;
}
message CreateResponse {
  string ID = 1;
}

message AddGameTickRequest { 
  string ID = 1;
  GameTick GameTick = 2; 
}
message AddGameTickResponse { Game game = 1; }

message EndGameRequest  { string ID = 1; }
message EndGameResponse {}

message SnakeOptions {
  string Name = 1;
  string URL = 2;
  string ID = 3;
}

message Game { 
  string ID = 1; 
  string Status = 2;
  int64 Width = 3;
  int64 Height = 4;
  repeated GameTick Ticks = 5;
  int64 SnakeTimeout = 6; // number of milliseconds for snake api calls
  int64 TurnTimeout = 7; // number of milliseconds for turn delay
  string Mode = 8;
};

message GameTick {
  int64 Turn = 1;
  repeated Point Food = 2;
  repeated Snake Snakes = 3;
}

message Point {
  int64 X = 1;
  int64 Y = 2;
}

message Snake {
  string ID = 1;
  string Name = 2;
  string URL = 3;
  repeated Point Body = 4;
  int64 Health = 5;
  Death Death = 6;
}

message Death {
  string Cause = 1;
  int64 Turn = 2;
}
