syntax = "proto3";
package pb;

service Controller {
  // Lock should lock a specific game using the passed in ID. No writes to the
  // game should happen as long as the lock is valid. The game being locked does
  // not need to exist.
  rpc Lock(LockRequest) returns (LockResponse);
  // Unlock should unlock a game, if already unlocked a valid lock token must be
  // present.
  rpc Unlock(UnlockRequest) returns (UnlockResponse);
  // Pop should pop a game that is unlocked and unfished from the queue. It can
  // be subject to race conditions where it is locked immediately after, this is
  // expected.
  rpc Pop(PopRequest) returns (PopResponse);
  // Get should fetch the game state.
  rpc Get(GetRequest) returns (GetResponse);
  // Start inserts a new game to be picked up by a worker.
  rpc Start(StartRequest) returns (StartResponse);
}

message LockRequest  { string ID = 1; }
message LockResponse { string Token = 1; }

message UnlockRequest  { string ID = 1; }
message UnlockResponse {}

message PopRequest  {}
message PopResponse { string ID = 1; }

message Game { string ID = 1; };
message GetRequest  { string ID = 1; }
message GetResponse { Game Game = 1; }

message StartRequest  { Game Game = 1; }
message StartResponse {}
