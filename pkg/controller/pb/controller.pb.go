// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controller.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	controller.proto

It has these top-level messages:
	LockRequest
	LockResponse
	UnlockRequest
	UnlockResponse
	PopRequest
	PopResponse
	Game
	GetRequest
	GetResponse
	StartRequest
	StartResponse
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LockRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *LockRequest) Reset()                    { *m = LockRequest{} }
func (m *LockRequest) String() string            { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()               {}
func (*LockRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{0} }

func (m *LockRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type LockResponse struct {
	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *LockResponse) Reset()                    { *m = LockResponse{} }
func (m *LockResponse) String() string            { return proto.CompactTextString(m) }
func (*LockResponse) ProtoMessage()               {}
func (*LockResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{1} }

func (m *LockResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UnlockRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *UnlockRequest) Reset()                    { *m = UnlockRequest{} }
func (m *UnlockRequest) String() string            { return proto.CompactTextString(m) }
func (*UnlockRequest) ProtoMessage()               {}
func (*UnlockRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{2} }

func (m *UnlockRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type UnlockResponse struct {
}

func (m *UnlockResponse) Reset()                    { *m = UnlockResponse{} }
func (m *UnlockResponse) String() string            { return proto.CompactTextString(m) }
func (*UnlockResponse) ProtoMessage()               {}
func (*UnlockResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{3} }

type PopRequest struct {
}

func (m *PopRequest) Reset()                    { *m = PopRequest{} }
func (m *PopRequest) String() string            { return proto.CompactTextString(m) }
func (*PopRequest) ProtoMessage()               {}
func (*PopRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{4} }

type PopResponse struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *PopResponse) Reset()                    { *m = PopResponse{} }
func (m *PopResponse) String() string            { return proto.CompactTextString(m) }
func (*PopResponse) ProtoMessage()               {}
func (*PopResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{5} }

func (m *PopResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Game struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{6} }

func (m *Game) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{7} }

func (m *GetRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetResponse struct {
	Game *Game `protobuf:"bytes,1,opt,name=Game" json:"Game,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{8} }

func (m *GetResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type StartRequest struct {
	Game *Game `protobuf:"bytes,1,opt,name=Game" json:"Game,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{9} }

func (m *StartRequest) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptorController, []int{10} }

func init() {
	proto.RegisterType((*LockRequest)(nil), "pb.LockRequest")
	proto.RegisterType((*LockResponse)(nil), "pb.LockResponse")
	proto.RegisterType((*UnlockRequest)(nil), "pb.UnlockRequest")
	proto.RegisterType((*UnlockResponse)(nil), "pb.UnlockResponse")
	proto.RegisterType((*PopRequest)(nil), "pb.PopRequest")
	proto.RegisterType((*PopResponse)(nil), "pb.PopResponse")
	proto.RegisterType((*Game)(nil), "pb.Game")
	proto.RegisterType((*GetRequest)(nil), "pb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "pb.GetResponse")
	proto.RegisterType((*StartRequest)(nil), "pb.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "pb.StartResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	// Lock should lock a specific game using the passed in ID. No more reads
	// should happen as long as the lock is valid.
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	// Unlock should unlock a game, if already unlocked a valid lock token must be
	// present.
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	// Pop should pop a game that is unlocked and unfished from the queue. It can
	// be subject to race conditions where it is locked immediately after, this is
	// expected.
	Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
	// Get should fetch the game state.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Start inserts a new game to be picked up by a worker.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Unlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	out := new(PopResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Pop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/pb.Controller/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// Lock should lock a specific game using the passed in ID. No more reads
	// should happen as long as the lock is valid.
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	// Unlock should unlock a game, if already unlocked a valid lock token must be
	// present.
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	// Pop should pop a game that is unlocked and unfished from the queue. It can
	// be subject to race conditions where it is locked immediately after, this is
	// expected.
	Pop(context.Context, *PopRequest) (*PopResponse, error)
	// Get should fetch the game state.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Start inserts a new game to be picked up by a worker.
	Start(context.Context, *StartRequest) (*StartResponse, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Pop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Controller_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Controller_Unlock_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _Controller_Pop_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Controller_Get_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Controller_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func init() { proto.RegisterFile("controller.proto", fileDescriptorController) }

var fileDescriptorController = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xd9, 0xdc, 0x86, 0xfe, 0xed, 0xda, 0x2e, 0x88, 0x48, 0x99, 0x28, 0x41, 0x44, 0x71,
	0x54, 0x98, 0x8f, 0xa0, 0x30, 0x04, 0x2f, 0xa4, 0xea, 0x03, 0xac, 0x23, 0x57, 0xab, 0x4d, 0x6c,
	0xe3, 0x2b, 0xfb, 0x1c, 0x36, 0x39, 0xb1, 0x8d, 0x8a, 0xbb, 0xeb, 0x39, 0xe7, 0xcb, 0x9f, 0x93,
	0x8f, 0x22, 0xd9, 0xc8, 0x4a, 0xd7, 0xb2, 0x2c, 0x45, 0x9d, 0xa9, 0x5a, 0x6a, 0xc9, 0x86, 0xaa,
	0xe0, 0x27, 0x08, 0x1e, 0xe5, 0x66, 0x9b, 0x8b, 0xf7, 0x0f, 0xd1, 0x68, 0x16, 0x61, 0xf8, 0x70,
	0x7f, 0x3c, 0x38, 0x1b, 0x5c, 0x1e, 0xe4, 0xed, 0x17, 0x3f, 0x47, 0x48, 0xe3, 0x46, 0xc9, 0xaa,
	0x11, 0xec, 0x10, 0xe3, 0x17, 0xb9, 0x15, 0x95, 0x43, 0xa8, 0xe0, 0xa7, 0x98, 0xbe, 0x56, 0xe5,
	0x8e, 0x98, 0x04, 0xd1, 0x37, 0x40, 0x41, 0x3c, 0x04, 0x9e, 0xa4, 0x72, 0xbc, 0xd9, 0xc2, 0x56,
	0xee, 0x96, 0xdf, 0xc7, 0x8f, 0x30, 0x5a, 0xad, 0xdf, 0xfe, 0xf6, 0xe7, 0xc0, 0x4a, 0xe8, 0xff,
	0x2e, 0xbd, 0x46, 0x60, 0xa7, 0x2e, 0x74, 0x4e, 0x21, 0x16, 0x08, 0x96, 0xfb, 0x99, 0x2a, 0x32,
	0x53, 0xe7, 0xb6, 0xcb, 0x17, 0x08, 0x9f, 0xf5, 0xba, 0xee, 0xc2, 0x76, 0xd3, 0x31, 0xa6, 0x8e,
	0xa6, 0xf0, 0xe5, 0xe7, 0x00, 0xb8, 0xeb, 0xfc, 0xb2, 0x2b, 0x8c, 0x8c, 0x36, 0x16, 0x9b, 0x73,
	0x9e, 0xdf, 0x34, 0xe9, 0x1b, 0x6e, 0xad, 0x1b, 0x4c, 0x48, 0x0d, 0x9b, 0x99, 0xd9, 0x0f, 0x8f,
	0x29, 0xf3, 0x5b, 0xee, 0xc0, 0x05, 0xf6, 0x5a, 0x57, 0x2c, 0x32, 0xa3, 0x5e, 0x61, 0x1a, 0x77,
	0x75, 0xcf, 0xb5, 0xcf, 0x27, 0xae, 0xb7, 0x44, 0x9c, 0xef, 0x65, 0x81, 0xb1, 0x7d, 0x0b, 0xb3,
	0xbb, 0xf9, 0x12, 0xd2, 0x99, 0xd7, 0x21, 0xba, 0x98, 0xd8, 0x5f, 0xe7, 0xf6, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0xbb, 0x62, 0xe3, 0x8b, 0x4e, 0x02, 0x00, 0x00,
}
